--[[
    ULTIMATE EXPLOIT DUPER
    SUPER BYPASS - FORCE ITEM TO INVENTORY
]]

-- Load Rayfield UI
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local localPlayer = Players.LocalPlayer

-- Create Window
local Window = Rayfield:CreateWindow({
    Name = "üí• EXPLOIT DUPER",
    LoadingTitle = "Loading Exploit Engine...",
    LoadingSubtitle = "Super Bypass Activated",
    Theme = "Default",
    ToggleUIKeybind = "K"
})

-- Notification function
local function notify(msg)
    Rayfield:Notify({
        Title = "Exploit Duper",
        Content = msg,
        Duration = 6
    })
    print("[EXPLOIT] " .. msg)
end

-- Exploit Duper System
local ExploitDuper = {
    items = {},
    selectedItem = nil
}

-- SUPER BYPASS: Inject ke game memory
function ExploitDuper:injectBypass()
    notify("üíâ Injecting super bypass...")
    
    -- Bypass 1: Hook instance creation
    if hookmetamethod then
        local oldNamecall
        oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
            local method = getnamecallmethod()
            local args = {...}
            
            -- Bypass anti-cheat checks
            if method == "FindFirstChild" and tostring(self) == "Backpack" then
                notify("‚ö° Bypassing Backpack check...")
            end
            
            return oldNamecall(self, ...)
        end)
    end
    
    -- Bypass 2: Force backpack creation
    if not localPlayer:FindFirstChild("Backpack") then
        local backpack = Instance.new("Folder")
        backpack.Name = "Backpack"
        backpack.Parent = localPlayer
        notify("‚úÖ Created Backpack folder")
    end
    
    -- Bypass 3: Set high security context
    if setthreadcontext then
        setthreadcontext(2)
        notify("üîì Elevated security context")
    end
    
    notify("‚úÖ Super bypass injected!")
end

-- SCAN: Find semua item yang bisa di-dupe
function ExploitDuper:scanForItems()
    notify("üîç Scanning for items...")
    
    self.items = {}
    
    -- Scan Backpack
    local backpack = localPlayer:FindFirstChild("Backpack")
    if backpack then
        for _, item in pairs(backpack:GetChildren()) do
            if item:IsA("Tool") then
                table.insert(self.items, {
                    name = item.Name,
                    object = item,
                    type = "Tool"
                })
            end
        end
    end
    
    -- Scan Player untuk items lain
    for _, item in pairs(localPlayer:GetChildren()) do
        if item:IsA("Tool") and not string.find(item.Name, "Backpack") then
            table.insert(self.items, {
                name = item.Name,
                object = item,
                type = "PlayerTool"
            })
        end
    end
    
    -- Scan ReplicatedStorage untuk templates
    for _, item in pairs(ReplicatedStorage:GetDescendants()) do
        if item:IsA("Tool") and #self.items < 20 then
            table.insert(self.items, {
                name = item.Name,
                object = item,
                type = "Template"
            })
        end
    end
    
    notify("‚úÖ Found " .. #self.items .. " items")
    self:updateUI()
end

-- UPDATE UI: Refresh dropdown
function ExploitDuper:updateUI()
    local itemNames = {}
    for _, item in pairs(self.items) do
        table.insert(itemNames, item.name .. " (" .. item.type .. ")")
    end
    
    if #itemNames == 0 then
        table.insert(itemNames, "No items found - Use Force Scan")
    end
    
    -- Update dropdown
    if mainTab then
        for _, element in pairs(mainTab:GetElements()) do
            if element.Name == "ItemDropdown" then
                mainTab:RemoveElement(element)
                break
            end
        end
        
        mainTab:CreateDropdown({
            Name = "üéØ Select Item to Dupe",
            Options = itemNames,
            Flag = "ItemDropdown",
            Callback = function(selected)
                ExploitDuper.selectedItem = selected
                notify("Target: " .. selected)
            end
        })
    end
end

-- ULTIMATE DUPE: Force item ke inventory
function ExploitDuper:ultimateDupe(amount)
    if not self.selectedItem then
        notify("‚ùå No item selected!")
        return
    end
    
    notify("üí• STARTING ULTIMATE DUPE x" .. amount)
    
    local originalItem = nil
    local itemName = string.gsub(self.selectedItem, " %(.*%)", "") -- Remove type
    
    -- Find original item
    for _, item in pairs(self.items) do
        if item.name == itemName then
            originalItem = item.object
            break
        end
    end
    
    if not originalItem then
        notify("‚ùå Item not found!")
        return
    end
    
    local successCount = 0
    
    for i = 1, amount do
        notify("üîÑ Dupe [" .. i .. "/" .. amount .. "] " .. itemName)
        
        -- METHOD 1: Direct clone to backpack
        local success1 = pcall(function()
            local clone = originalItem:Clone()
            clone.Name = itemName .. "_DUPED_" .. i
            
            -- Force add to backpack
            if not localPlayer:FindFirstChild("Backpack") then
                local backpack = Instance.new("Folder")
                backpack.Name = "Backpack"
                backpack.Parent = localPlayer
            end
            
            clone.Parent = localPlayer.Backpack
            return true
        end)
        
        -- METHOD 2: Force via remote if available
        local success2 = pcall(function()
            -- Cari remote events untuk add item
            for _, remote in pairs(ReplicatedStorage:GetDescendants()) do
                if remote:IsA("RemoteEvent") then
                    if string.find(remote.Name:lower(), "add") or 
                       string.find(remote.Name:lower(), "give") or
                       string.find(remote.Name:lower(), "item") then
                        remote:FireServer(itemName)
                    end
                end
            end
            return true
        end)
        
        -- METHOD 3: Direct to player
        local success3 = pcall(function()
            local clone = originalItem:Clone()
            clone.Name = itemName .. "_COPY_" .. i
            clone.Parent = localPlayer
            return true
        end)
        
        if success1 or success2 or success3 then
            successCount = successCount + 1
            notify("‚úÖ Success: " .. itemName .. " #" .. i)
        else
            notify("‚ùå Failed: " .. itemName .. " #" .. i)
        end
        
        wait(0.05) -- Very fast
    end
    
    notify("üéâ ULTIMATE DUPE COMPLETE!")
    notify("üí∞ Success: " .. successCount .. "/" .. amount)
    
    return successCount
end

-- FORCE SCAN: Deep scan semua tempat
function ExploitDuper:forceScan()
    notify("üîç FORCE SCANNING...")
    
    self.items = {}
    
    -- Scan semua possible locations
    local locations = {
        localPlayer,
        localPlayer:FindFirstChild("Backpack"),
        ReplicatedStorage,
        workspace,
        game:GetService("StarterPack"),
        game:GetService("StarterPlayer")
    }
    
    for _, location in pairs(locations) do
        if location then
            pcall(function()
                for _, item in pairs(location:GetDescendants()) do
                    if item:IsA("Tool") and #self.items < 50 then
                        table.insert(self.items, {
                            name = item.Name,
                            object = item,
                            type = location.Name
                        })
                    end
                end
            end)
        end
    end
    
    notify("‚úÖ Force scan found " .. #self.items .. " items")
    self:updateUI()
end

-- Create Main Tab
local mainTab = Window:CreateTab("üí• Main")
mainTab:CreateLabel("EXPLOIT DUPER - SUPER BYPASS")

-- Bypass Injection
mainTab:CreateButton({
    Name = "üíâ INJECT SUPER BYPASS",
    Callback = function()
        ExploitDuper:injectBypass()
    end
})

-- Scan Buttons
mainTab:CreateButton({
    Name = "üîç Quick Scan",
    Callback = function()
        ExploitDuper:scanForItems()
    end
})

mainTab:CreateButton({
    Name = "üîç FORCE SCAN (Deep)",
    Callback = function()
        ExploitDuper:forceScan()
    end
})

-- Item Selection
mainTab:CreateDropdown({
    Name = "üéØ Select Item to Dupe",
    Options = {"Scan first..."},
    Flag = "ItemDropdown",
    Callback = function(selected)
        ExploitDuper.selectedItem = selected
        notify("Target: " .. selected)
    end
})

-- Dupe Amount
local dupeAmount = 10
mainTab:CreateInput({
    Name = "üî¢ Dupe Amount",
    PlaceholderText = "10",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        local num = tonumber(text)
        if num and num > 0 then
            dupeAmount = num
            notify("Amount: " .. num)
        else
            notify("‚ùå Invalid amount!")
        end
    end
})

-- Dupe Buttons
mainTab:CreateButton({
    Name = "üöÄ ULTIMATE DUPE",
    Callback = function()
        ExploitDuper:ultimateDupe(dupeAmount)
    end
})

mainTab:CreateSection("Quick Dupe")

mainTab:CreateButton({
    Name = "üí∞ DUPE x50",
    Callback = function()
        ExploitDuper:ultimateDupe(50)
    end
})

mainTab:CreateButton({
    Name = "üíé DUPE x100",
    Callback = function()
        ExploitDuper:ultimateDupe(100)
    end
})

-- Tools Tab
local toolsTab = Window:CreateTab("üõ†Ô∏è Tools")
toolsTab:CreateLabel("Exploit Tools")

toolsTab:CreateButton({
    Name = "üìã List All Scanned Items",
    Callback = function()
        if #ExploitDuper.items == 0 then
            notify("‚ùå No items scanned!")
            return
        end
        
        notify("üìã SCANNED ITEMS:")
        for i, item in pairs(ExploitDuper.items) do
            notify(i .. ". " .. item.name .. " (" .. item.type .. ")")
        end
    end
})

toolsTab:CreateButton({
    Name = "üßπ Clean Duped Items",
    Callback = function()
        local cleaned = 0
        
        -- Clean backpack
        local backpack = localPlayer:FindFirstChild("Backpack")
        if backpack then
            for _, item in pairs(backpack:GetChildren()) do
                if item:IsA("Tool") and (string.find(item.Name, "_DUPED_") or string.find(item.Name, "_COPY_")) then
                    item:Destroy()
                    cleaned = cleaned + 1
                end
            end
        end
        
        -- Clean player
        for _, item in pairs(localPlayer:GetChildren()) do
            if item:IsA("Tool") and (string.find(item.Name, "_DUPED_") or string.find(item.Name, "_COPY_")) then
                item:Destroy()
                cleaned = cleaned + 1
            end
        end
        
        notify("üßπ Cleaned " .. cleaned .. " duped items")
    end
})

toolsTab:CreateButton({
    Name = "üîÑ Refresh Inventory",
    Callback = function()
        local character = localPlayer.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid:UnequipTools()
                notify("‚úÖ Inventory refreshed!")
            end
        end
    end
})

-- Auto execute
notify("üí• EXPLOIT DUPER LOADED!")
notify("üîì Auto-injecting bypass...")

-- Auto inject and scan
spawn(function()
    wait(2)
    ExploitDuper:injectBypass()
    wait(1)
    ExploitDuper:forceScan()
    wait(1)
    notify("‚úÖ READY! Select item and click ULTIMATE DUPE!")
end)
